#include <Wire.h>
#include <WiFiS3.h>  // Correct library for Arduino UNO R4 WiFi (ESP32-S3)
#include <ArduinoHttpClient.h>  // Include the HTTP client library

#define MMA8452_ADDRESS 0x1C  // Indirizzo I2C del sensore
#define MMA8452_REG_CTRL1 0x2A
#define MMA8452_REG_X_MSB 0x01
#define MMA8452_REG_Y_MSB 0x03
#define MMA8452_REG_Z_MSB 0x05

// Definire la durata della registrazione e la frequenza
#define RECORD_DURATION 3000  // 3 secondi in millisecondi
#define SAMPLING_RATE 100  // Frequenza di campionamento (100 Hz)
#define SAMPLES (RECORD_DURATION / (1000 / SAMPLING_RATE))  // Numero di campioni in 3 secondi
#define TOTAL_SAMPLES (SAMPLES * 3)  // Totale campioni combinati (X, Y, Z)


// Dati per la connessione WiFi
char ssid[] = "ASUS";  // Nome della rete Wi-Fi
char password[] = "1990199019901";  // Password della rete Wi-Fi

// Array per memorizzare i valori combinati
float combinedArray[TOTAL_SAMPLES];

unsigned long lastSampleTime = 0;  // Tempo dell'ultimo campione
int sampleIndex = 0;  // Indice per l'array combinato

// Dati per l'HTTP client
WiFiClient wifiClient;
HttpClient client = HttpClient(wifiClient, "gentilin.pythonanywhere.com", 80);  // Set base URL

void setup() {
  // Avvio comunicazione seriale
  Serial.begin(115200);

  // Connessione al Wi-Fi
  Serial.println("Connecting to WiFi...");
  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting...");
  }
  Serial.println("Connected to WiFi!");

  Wire.begin();  // Inizializza la comunicazione I2C
  initMMA8452();  // Inizializza il sensore
  Serial.println("MMA8452 Ready");
}

void loop() {
  unsigned long currentTime = millis();

  // Raccogli dati a 100 Hz
  if (currentTime - lastSampleTime >= (1000 / SAMPLING_RATE)) {
    lastSampleTime = currentTime;

    // Leggi i valori dell'accelerometro
    int16_t x = readMMA8452(MMA8452_REG_X_MSB);
    int16_t y = readMMA8452(MMA8452_REG_Y_MSB);
    int16_t z = readMMA8452(MMA8452_REG_Z_MSB);

    // Converte i valori letti in m/s^2 e li memorizza nel array combinato
    combinedArray[sampleIndex] = x * 0.001;  // X in m/s^2
    combinedArray[sampleIndex + SAMPLES] = y * 0.001;  // Y in m/s^2 (parte successiva dell'array)
    combinedArray[sampleIndex + (2 * SAMPLES)] = z * 0.001;  // Z in m/s^2 (terza parte dell'array)

    // Incrementa l'indice dell'array
    sampleIndex++;

    // Se abbiamo registrato i campioni per 3 secondi, stampa i risultati e fai il POST
    if (sampleIndex >= SAMPLES) {
      printResults();
      sendPostRequest();  // Esegui il POST dei dati
      sampleIndex = 0;  // Reset per una nuova registrazione
    }
  }
}

// Funzione per inizializzare il sensore MMA8452
void initMMA8452() {
  // Imposta il sensore in modalità standby (per configurarlo)
  Wire.beginTransmission(MMA8452_ADDRESS);
  Wire.write(MMA8452_REG_CTRL1);
  Wire.write(0x01);  // Attiva il sensore in modalità standby
  Wire.endTransmission();
  delay(10);

  // Imposta il sensore in modalità attiva (per leggere i dati)
  Wire.beginTransmission(MMA8452_ADDRESS);
  Wire.write(MMA8452_REG_CTRL1);
  Wire.write(0x05);  // Attiva il sensore in modalità attiva
  Wire.endTransmission();
  delay(10);
}

// Funzione per leggere un valore a 16 bit da un registro del sensore
int16_t readMMA8452(uint8_t reg) {
  Wire.beginTransmission(MMA8452_ADDRESS);
  Wire.write(reg);
  Wire.endTransmission(false);
  Wire.requestFrom(MMA8452_ADDRESS, (uint8_t)2);

  // Attendi che i dati siano disponibili
  while (Wire.available() < 2);

  // Leggi i 2 byte
  uint8_t highByte = Wire.read();
  uint8_t lowByte = Wire.read();

  // Combina i byte per ottenere il valore a 16 bit
  int16_t value = (highByte << 8) | lowByte;
  return value;
}

// Funzione per stampare i risultati registrati
void printResults() {
  // Stampa l'array combinato con i valori di X, Y e Z
  for (int i = 0; i < TOTAL_SAMPLES; i++) {
    Serial.print(combinedArray[i], 3);  // 3 decimali
    if (i < TOTAL_SAMPLES - 1) {
      Serial.print(", ");
    }
  }
  Serial.println();  // Fine della stampa
}

// Funzione per inviare il POST con i dati combinati
void sendPostRequest() {
  // Prepara il JSON per il POST
  String jsonData = "[";
  for (int i = 0; i < TOTAL_SAMPLES; i++) {
    jsonData += String(combinedArray[i], 3);
    if (i < TOTAL_SAMPLES - 1) {
      jsonData += ", ";
    }
  }
  jsonData += "]";

  // Imposta l'header per la richiesta POST
  client.beginRequest();
  client.post("/device1");
  client.sendHeader("Content-Type", "application/json");
  client.sendHeader("Content-Length", jsonData.length());
  client.endRequest();

  // Invia il corpo della richiesta (i dati in formato JSON)
  client.print(jsonData);

  // Leggi la risposta dal server
  int statusCode = client.responseStatusCode();
  String response = client.responseBody();
  Serial.print("Response status code: ");
  Serial.println(statusCode);
  Serial.print("Response body: ");
  Serial.println(response);
  delay(10000);
}